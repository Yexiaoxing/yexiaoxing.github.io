<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoxing Ye&#39;s Farmland</title>
  
  <subtitle>Blog for everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaoxing.us/"/>
  <updated>2017-11-24T14:39:40.384Z</updated>
  <id>https://xiaoxing.us/</id>
  
  <author>
    <name>Xiaoxing Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deploy Mailman 3 on AWS Using Docker (In Progress)</title>
    <link href="https://xiaoxing.us/2017/11/24/Deploy-Mailman-3-on-AWS-using-Docker/"/>
    <id>https://xiaoxing.us/2017/11/24/Deploy-Mailman-3-on-AWS-using-Docker/</id>
    <published>2017-11-24T11:39:43.000Z</published>
    <updated>2017-11-24T14:39:40.384Z</updated>
    
    <content type="html"><![CDATA[<p>Docker is now a hot topic, which is an open platform for developers and sysadmins to build, ship, and run distributed applications. It is good if you want to isolate different app environments.</p><p>Another topic today, Mailman, is a free software for managiing mailing list. It is a GNU project and it offers a good interface. In this article, I would like to introduce how to use Docker to deploy Mailman 3 on AWS, with Postfix and Amazon SES.</p><p>In this tutorial, I will assume that you are using macOS or Linux, which has an embedded OpenSSH tool. If you are using Windows 10, you may use the Windows Subsystem for Linux. For more information on the subsystem, please refer to <a href="https://msdn.microsoft.com/en-us/commandline/wsl/install-win10" target="_blank" rel="noopener">MSDN - Windows 10 Installation Guide</a> .</p><h1 id="Initialize-a-new-EC2-Instance"><a href="#Initialize-a-new-EC2-Instance" class="headerlink" title="Initialize a new EC2 Instance"></a>Initialize a new EC2 Instance</h1><p>Before we go into the EC2 part, there remains a question — why not Elastic Container Service? One simple answer is, we need to deploy images on one instance (to save resource). So, let’s get started.</p><h2 id="Generate-a-SSH-Key"><a href="#Generate-a-SSH-Key" class="headerlink" title="Generate a SSH Key"></a>Generate a SSH Key</h2><p>First you need a SSH keys. By default, Amazon EC2 instances only allow user to log in using Key-Based Authentication. SSH keys provide an easy and secure way of logging into your server with only a pair of public/private keys.</p><p>If you don’t have one, you may create one on your computer.</p><ol><li>Run the command (replace the your_email@example.com with your main email address).</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><ol><li>When you’re prompted to “Enter a file in which to save the key,” press Enter. This accepts the default file location. Or you may choose your desired file location.</li><li>When you’re prompted to “Enter passphrase (empty for no passphrase)”, please enter one password you like. You need to remember the password since it is required to decrypt the secret key. You may leave it blank, though it will be a bit unsecure.</li></ol><p><img src="https://static.notion-static.com/e0d490aea5114b298e1c48833f84c244/Untitled" alt=""></p><h2 id="Add-the-New-SSH-Key-to-ssh-agent"><a href="#Add-the-New-SSH-Key-to-ssh-agent" class="headerlink" title="Add the New SSH Key to ssh-agent"></a>Add the New SSH Key to <code>ssh-agent</code></h2><p> <code>ssh-agent</code> is a program to hold private keys used for public key authentication (RSA, DSA). You may need to add your newly-generated key to <code>ssh-agent</code> , to make sure it will be used later. Here are the steps:</p><ol><li>Start a new agent process in the background.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure><ol><li>(For macOS Sierra / High Sierra users) You will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line"> AddKeysToAgent yes</span><br><span class="line"> UseKeychain yes</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><ol><li>Add your key to agent. Remember to replace ~/.ssh/id_rsa with where you place it.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -K ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://static.notion-static.com/24f9896a829e4949b945c650f5448939/Untitled" alt=""></p><h2 id="Import-the-SSH-Key-on-Amazon-Platform"><a href="#Import-the-SSH-Key-on-Amazon-Platform" class="headerlink" title="Import the SSH Key on Amazon Platform"></a>Import the SSH Key on Amazon Platform</h2><p>Now you have your owned SSH keys, and you will need to import it so Amazon can recognize it.</p><p>Log into your <a href="https://console.aws.amazon.com/console/home" target="_blank" rel="noopener">AWS Console</a> , click the EC2 link to go to the <a href="https://console.aws.amazon.com/ec2/v2/home" target="_blank" rel="noopener">EC2 Console</a> . Here you need to choose one of the available regions of EC2. Since I live in China, I choose the <em>Asia Pacific (Tokyo)</em> region for better speed. You may choose based on your visitor origins.</p><p><img src="https://static.notion-static.com/34f50a4985ab47a5a93913ab9e1acf14/Untitled" alt=""></p><p>Click Network &amp; Security - Key Pairs on left sidebar. You will see a “Import Key Pair” button on top. Here you may copy using <code>clipcopy</code> by</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;where_is_your_public_key.pub&gt; | clipcopy</span><br></pre></td></tr></table></figure><p>You will need to paste it in the popup window on AWS console.</p><h2 id="Launch-a-New-Instance"><a href="#Launch-a-New-Instance" class="headerlink" title="Launch a New Instance"></a>Launch a New Instance</h2><p>After you have imported the public key, go back to the Dashboard page. Then click the big blue button “ <em>Launch Instance</em> “.</p><p><img src="https://static.notion-static.com/0145cbc2e7624bbabcd4f28fbaac5835/Untitled" alt=""></p><p>On the next page, you should choose an Amazon Machine Image (AMI) to run on the new EC2 Instance. An AMI is a template that contains the software configuration (operating system, application server, and applications) required to launch your instance. Here we will pick the Amazon Linux AMI, since it includes most we need.</p><p><img src="https://static.notion-static.com/d20cdf36ad294eafaf395b20eb86b6e8/Untitled" alt=""></p><p>Next, choose an Instance Type, which is a combination of CPU, memory, storage, and networking capacity. Here we choose the <code>t2.micro</code> which provides free tier, then click on the “Next: Configure Instance Details” button. <a href="https://aws.amazon.com/free/" target="_blank" rel="noopener">Learn more</a> about free usage.</p><p><img src="https://static.notion-static.com/cc011fef86b5453b971d1093fe036735/Untitled" alt=""></p><p>Let’s keep the default settings of Instance Details and next. We use a 30 GB EBS since the free tier provides it:</p><p><img src="https://static.notion-static.com/7cf66fd77d624de4a78b2ccb47786d48/Untitled" alt=""></p><p>We don’t need a tag yet, so leave it blank and next to configure Security Group. A security group is a set of firewall rules that control the traffic for the instance.</p><p>Here you need to add some rules:</p><ul><li>Allow SSH (TCP 22) traffic from your IP address</li><li>Allow all ICMP traffic from your IP address, to enable ping requests</li><li>Allow HTTPS and HTTP traffic (TCP 443 and 80)</li><li>Allow port 8000 for testing Mailman (TCP 8000)</li><li>Allow port 8024 for LMTP (TCP 8024)</li><li>Allow port 25 for SMTP (TCP 25)</li></ul><p>You can also give the new security group a fancy name, like “Mailman-Security-Group”. Then click “Review and Launch”.</p><p><img src="https://static.notion-static.com/4004c447f653413c8c27c74cd6ded8a1/Untitled" alt=""></p><p>In the Review page, you will see all the settings you have made before. Once you ensure they are ready, click “Launch” button. You will now be prompted of choosing your key pair. Still remember what we have done before? Choose that key, and Launch.</p><p><img src="https://static.notion-static.com/5debc8cc967d454a9b5a7db651f9c964/Untitled" alt=""></p><p>You can now view the instances and find your newly-created one after few-minute initialization.</p><h2 id="Allocate-Elastic-IP"><a href="#Allocate-Elastic-IP" class="headerlink" title="Allocate Elastic IP"></a>Allocate Elastic IP</h2><p>An Elastic IP address is a static IP address designed for dynamic cloud computing. An Elastic IP address is associated with your AWS account. With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. Read more about EIPs <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html" target="_blank" rel="noopener">here</a> .</p><p>In short, we need to ensure our mailing list service has minimal downtime. Once the instance is down, we may switch to another instance if needed. To do that, first go back to the EC2 Dashboard, and then choose Network &amp; Security - Elastic IPs.</p><p><img src="https://static.notion-static.com/dc0f131dd4db4497865a25c687238ae9/Untitled" alt=""></p><p>CLick “Allocate new address” button, then “Allocate”. You will now have a new IP. Remember it as <eip>.</eip></p><p>Then go back to Elastic IPs page. Choose the one you just get, then click Actions - Associate address.</p><p><img src="https://static.notion-static.com/5946e9d77ae043c7952ae287a16d1939/Untitled" alt=""></p><p>Here you need to associate the new IP to the new EC2 instance.</p><p><img src="https://static.notion-static.com/508be3f14dc24ca79c8ea117938e3bf3/Untitled" alt=""></p><h2 id="Try-to-Connect-to-the-Instance-amp-Update-the-System"><a href="#Try-to-Connect-to-the-Instance-amp-Update-the-System" class="headerlink" title="Try to Connect to the Instance &amp; Update the System"></a>Try to Connect to the Instance &amp; Update the System</h2><p>You now have your EC2 instance. Excited? Now let’s connect to the instance via SSH.</p><p>The default username of the image we used (remember? Amazon Linux) is <code>ec2-user</code> , so we can connect using</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ssh ec2-user@&lt;EIP&gt;</span><br></pre></td></tr></table></figure><p>You may be prompted to enter the password of your key. It is what you have set before. Forget the password? Go back to the most beginning of this article, and restart the works.</p><p>You are now in control of a fully working Linux server. Let’s first update the system to ensure security.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo yum update -y</span><br></pre></td></tr></table></figure><p><img src="https://static.notion-static.com/66f1f55618bb430387771b8870be43bb/Untitled" alt=""></p><h1 id="Install-Docker-on-the-Instance"><a href="#Install-Docker-on-the-Instance" class="headerlink" title="Install Docker on the Instance"></a>Install Docker on the Instance</h1><p>The next step is to install Docker on your EC2 Instance. Go back to the SSH session we opened before, enter:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo yum install -y docker</span><br><span class="line">&gt; sudo service docker start</span><br></pre></td></tr></table></figure><p>Next, add the <code>ec2-user</code> to the <code>docker</code> group so you can execute Docker commands without using sudo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo usermod -a -G docker ec2-user</span><br></pre></td></tr></table></figure><p>You need to log out and log back to make it take effect. Enter <code>exit</code> to log out then log back with <code>ssh</code> . If nothing goes wrong, type <code>docker info</code> and it will return information about the Docker installation.</p><p>Now we can test the Docker installation by running the <code>training/webapp</code> image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:5000 training/webapp:latest python [app.py](http://app.py)</span><br></pre></td></tr></table></figure><p>Copy the last line, which is the ID of the container. Try to visit http://<eip>, you should see a page saying “Hello World!”. If so, congratulations, and we now need to stop the container by:</eip></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;CONTAINER_ID&gt; -f</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-mac" target="_blank" rel="noopener">GitHub - Generating a new SSH key and adding it to the ssh-agent</a></li><li><a href="https://asynchronous.in/docker-mailman/" target="_blank" rel="noopener">GNU Mailman 3 Deployment with Docker</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker is now a hot topic, which is an open platform for developers and sysadmins to build, ship, and run distributed applications. It is
      
    
    </summary>
    
    
      <category term="Tutorials, docker, mailman, aws" scheme="https://xiaoxing.us/tags/Tutorials-docker-mailman-aws/"/>
    
  </entry>
  
  <entry>
    <title>From 0 to 1: Build Your Blog Using Hexo</title>
    <link href="https://xiaoxing.us/2017/11/19/From-0-to-1-Build-Your-Blog-using-Hexo/"/>
    <id>https://xiaoxing.us/2017/11/19/From-0-to-1-Build-Your-Blog-using-Hexo/</id>
    <published>2017-11-18T18:13:50.000Z</published>
    <updated>2017-11-19T16:35:30.563Z</updated>
    
    <content type="html"><![CDATA[<p>Want to have a place to save your ideas? You may need a blog. But the question comes, what kind of blogging software do you need?</p><p>I have tried many blogs, such as WordPress and Ghost. They both require to be installed on a server but I don’t want to maintain a server (too lazy). So I come to Hexo, a static blog framework.</p><p>In this blog, I will mark down some important steps to set up a Hexo instance locally and to deploy it on GitHub Pages (possibly with CloudFlare or Netlify in next post), with the assumption of using a newly-installed macOS High Sierra.</p><h2 id="Install-Packages"><a href="#Install-Packages" class="headerlink" title="Install Packages"></a>Install Packages</h2><h3 id="Install-Homebrew"><a href="#Install-Homebrew" class="headerlink" title="Install Homebrew"></a>Install Homebrew</h3><p>Homebrew is a package manager for macOS. It will simplify many things such as finding packages and installing dependencies. Its official website is <a href="https://brew.sh" target="_blank" rel="noopener">https://brew.sh</a> .</p><p>The installation is very simple – just paste this line at a Terminal prompt:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span></span><br></pre></td></tr></table></figure><p>It will also install Command Line Tools (CLT) for Xcode. This is required for compiling source codes.</p><p>After installing homebrew, we can run <code>brew doctor</code> to see if it is successfully installed and able to use.</p><h3 id="Check-if-Git-is-installed"><a href="#Check-if-Git-is-installed" class="headerlink" title="Check if Git is installed"></a>Check if Git is installed</h3><p>To make sure git is installed, we can run <code>command -v git</code> . If it doesn’t complain that “command not found”, things are fine.</p><p>If, unfortunately, it complains, check if Homebrew is successfully installed, and try <code>brew install git</code> to see if it can fix.</p><h3 id="Install-Node-JS"><a href="#Install-Node-JS" class="headerlink" title="Install Node.JS"></a>Install Node.JS</h3><p>Since Hexo itself is a Node.js package, we will need to install Node.js first. Node.js itself updates very frequently, and the Hexo recommends using NVM.</p><p>NVM, short for <em>Node Version Manager</em> , is a script to manage Node.js versions. It can also be installed using a single line:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span></span><br></pre></td></tr></table></figure><p>(Note: Please check <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a> to see if there is any update to NVM install script.)</p><p>Once NVM is installed, restart the Terminal then install a stable version of Node.js:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm install stable</span></span><br></pre></td></tr></table></figure><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><p>You are finally here. Just install Hexo with npm:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p>It will install a global instance of Hexo in your home directory.</p><h3 id="Use-a-Mirror-for-npm-Maybe-for-Chinese-Users-Only"><a href="#Use-a-Mirror-for-npm-Maybe-for-Chinese-Users-Only" class="headerlink" title="Use a Mirror for npm (Maybe for Chinese Users Only)"></a>Use a Mirror for npm (Maybe for Chinese Users Only)</h3><p>Emmm… As we all know, the network in China is undergoing some difficulties. If you fail to fetch packages from the official registry (registry.npmjs.org) using NPM, you may try to use one of the mirrors in China.</p><p>Here, I recommend you to use the Taonpm (Taobao NPM Mirror). This is run by Alibaba so the speed and availability can be guaranteed.</p><p>There are many ways to use it. For example, use the smart-npm package instead of npm, by running <code>npm install --global smart-npm --registry=https://registry.npm.taobao.org/</code> . Or alias a new command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></span></span><br><span class="line">--cache=$HOME/.npm/.cache/cnpm \</span><br><span class="line">--disturl=https://npm.taobao.org/dist \</span><br><span class="line">--userconfig=$HOME/.cnpmrc"</span><br></pre></td></tr></table></figure><p>(Reference: <a href="http://www.uedbox.com/npm-install-slow-solution/" target="_blank" rel="noopener">http://www.uedbox.com/npm-install-slow-solution/</a> )</p><h2 id="Initialize-Your-Blog-Locally"><a href="#Initialize-Your-Blog-Locally" class="headerlink" title="Initialize Your Blog Locally"></a>Initialize Your Blog Locally</h2><p>Now you have installed Hexo, it is time to initialize Hexo. Simply run it (replacing</p><folder> with your desired target):</folder><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br></pre></td></tr></table></figure><p>This creates a basic project folder, which looks like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\_config.yml # Site configuration file</span><br><span class="line">package-lock.json # You may see this file which is used by npm</span><br><span class="line">package.json # Application dependencies</span><br><span class="line">node_modules # Here store Node.js Modules</span><br><span class="line">scaffolds # When you create a new post, Hexo bases the new file on the scaffold</span><br><span class="line">source # Where site contents locate</span><br><span class="line">themes # Theme folder for static website generation</span><br></pre></td></tr></table></figure><h3 id="Configure-Your-New-Blog"><a href="#Configure-Your-New-Blog" class="headerlink" title="Configure Your New Blog"></a>Configure Your New Blog</h3><p>You are having a fresh Hexo instance. Why not customize it? You can modify most site settings in <code>_config.yml</code> .</p><p>Please refer to <a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/docs/configuration.html</a> for available settings. Here I would like to mention some important</p><p><strong>Site:</strong> Title, subtitle, description, author, language, timezone</p><p><strong>URL:</strong> url, root, permalink</p><h2 id="How-About…-Start-Writing"><a href="#How-About…-Start-Writing" class="headerlink" title="How About… Start Writing?"></a>How About… Start Writing?</h2><p>No one will read an empty blog, right? So, let’s start writing! To create a new post or a new page, just run the command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure><p>There are three layouts available by default, namely <code>post</code> , <code>page</code> , and <code>draft</code> . If you don’t specify, <code>post</code> layout will be used.</p><p>Also, remember to quote your title if it contains spaces or special characters!</p><p>You may see that there is a special layout: <code>draft</code> . Posts initialized with this layout will not be displayed by default and you can use <code>publish</code> command to move drafts to post folder.</p><p>After running the command, Hexo will build a new file based on the corresponding file in <code>scaffolds</code> file. Yes – you can add your own!</p><p>By default, the generated filename will use the post title. If you want to have a different one, consider editing the setting <code>new_post_name</code> . For more information, please read <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a> .</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Hexo uses Markdown in the content. What is Markdown?</p><blockquote><p>Markdown is a lightweight markup language with plain text formatting syntax. It is designed so that it can be converted to HTML and many other formats using a tool by the same name.</p><footer><strong>Wikipedia <https: en.wikipedia.org="" wiki="" markdown=""> Markdown</https:></strong></footer></blockquote><p>It has a very simple but powerful syntax.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Heading</span></span><br><span class="line"></span><br><span class="line"><span class="section">### Sub-heading</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### Another deeper heading</span></span><br><span class="line"></span><br><span class="line">Paragraphs are separated</span><br><span class="line">by a blank line.</span><br><span class="line"></span><br><span class="line">Two spaces at the end of a line leave a</span><br><span class="line">line break.</span><br><span class="line"></span><br><span class="line">Text attributes <span class="emphasis">_italic_</span>, <span class="emphasis">*italic*</span>, <span class="strong">__bold__</span>, <span class="strong">**bold**</span>, <span class="code">`monospace`</span>.</span><br><span class="line"></span><br><span class="line">Horizontal rule:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Bullet list:</span><br><span class="line"></span><br><span class="line"> * apples</span><br><span class="line"> * oranges</span><br><span class="line"> * pears</span><br><span class="line"></span><br><span class="line">Numbered list:</span><br><span class="line"></span><br><span class="line"> 1\. apples</span><br><span class="line"> 2\. oranges</span><br><span class="line"> 3\. pears</span><br><span class="line"></span><br><span class="line">A [<span class="string">link</span>](<span class="link">http://example.com</span>).</span><br></pre></td></tr></table></figure><h3 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h3><p>Hexo provides a useful way for you to quickly add specific content to the posts. For more information, please refer to <a href="https://hexo.io/docs/tag-plugins.html#Code-Block" target="_blank" rel="noopener">https://hexo.io/docs/tag-plugins.html</a> .</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Each post has its own style. You can customize settings for each post in front-matter. Front-matter is a block of YAML or JSON at the beginning of the file, terminated by three dashes when written in YAML or three semicolons when written in JSON.</p><p>YAML:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>JSON:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"title"</span>: <span class="string">"Hello World"</span>,</span><br><span class="line"><span class="string">"date"</span>: <span class="string">"2013/7/13 20:46:25"</span></span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><p>There are various settings available, like title, date, updated date, categories, and tags.</p><p>Posts are supporting categories and tags. Please read <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">https://hexo.io/docs/front-matter.html</a> .</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Want to insert some images? Hexo provides a different mechanism than Markdown itself. You may read <a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="noopener">https://hexo.io/docs/asset-folders.html</a> for more details.</p><h2 id="Take-a-Look-At-The-Blog"><a href="#Take-a-Look-At-The-Blog" class="headerlink" title="Take a Look At The Blog"></a>Take a Look At The Blog</h2><p>OK, now you have your owned writings. What about taking a look at them? Hexo provides an optional module of a server. To start using the server, you will first have to install hexo-server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-server --save</span></span><br></pre></td></tr></table></figure><p>Remember to run it under the root of your blog. After installation, we can now run the server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p>Your website will now run at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> by default. When the server is running, Hexo will watch for file changes and update automatically so it’s not necessary to manually restart the server.</p><h2 id="Generate-A-Static-Site"><a href="#Generate-A-Static-Site" class="headerlink" title="Generate A Static Site"></a>Generate A Static Site</h2><p>Well, what if you don’t want to run another program to serve your website, instead of using Nginx to host static files? You can actually generate a static one! In Hexo, it can be done in a simple way.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br></pre></td></tr></table></figure><p>Then, everything you need is now in <code>public/</code> folder. Open <code>public/index.html</code> to see. So fantastic.</p><p>Wait, why my website becomes a bunch of plaintexts? It is because some browsers don’t allow you to load local stylesheets and Javascript. But, no worry. Don’t forget that we will push to GitHub Pages later.</p><h3 id="Watch-File-Changes"><a href="#Watch-File-Changes" class="headerlink" title="Watch File Changes"></a>Watch File Changes</h3><p>You know, it is very annoying to run the generator every time we change any file. Hexo can watch for file changes and regenerate files immediately by comparing the SHA1 checksum. Just run this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate --watch</span></span><br></pre></td></tr></table></figure><p>No pain.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>Don’t like the default look of your blog? There are hundreds of themes available (well I don’t count it). You can pick up one of your favorite themes and install it.</p><p>Here are the steps.</p><ol><li>Find a theme here: <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>Get the GitHub repo address of the theme. For example, I will use <a href="https://github.com/Ben02/hexo-theme-Anatole" target="_blank" rel="noopener">https://github.com/Ben02/hexo-theme-Anatole</a> .</li><li>Clone it to <code>themes/</code> folder by <code>git clone https://github.com/Ben02/hexo-theme-Anatole.git themes/anatole</code></li><li>Install required plugins (if stated in the theme description)</li><li>Update <code>_config.yml</code> file. You will see a <code>theme</code> configuration. Change the value to the folder name that contains your theme ( <code>anatole</code> here).</li><li>Re-generate your site and take a look.</li></ol><h2 id="Deploy-to-GitHub"><a href="#Deploy-to-GitHub" class="headerlink" title="Deploy to GitHub"></a>Deploy to GitHub</h2><p>It’s now time to publish your site! Excited?</p><p>In this example, we will use GitHub Pages. Why?</p><blockquote><p>GitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository.</p><footer><strong>GitHub Help <https: help.github.com="" articles="" what-is-github-pages=""> What is GitHub Pages?</https:></strong></footer></blockquote><p>Well, it is free and stable, why not? Let’s get started.</p><p>(What? You know nothing about Git and GitHub? Google it.)</p><p>First, go to GitHub and <a href="https://github.com/new" target="_blank" rel="noopener">create a new repository</a> named <em>username.github.io</em> . This will be your future blog space.</p><p>Second, install hexo-deployer-git. Yes Hexo itself doesn’t provide it (to keep it simple).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>Then, add some settings to your <code>_config.yml</code> :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url,</span> <span class="string">copied</span> <span class="string">from</span> <span class="string">GitHub&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">[branch]</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure><p>Last, run <code>hexo deploy</code> . If nothing goes wrong, you can navigate to http://</p><username>.github.io to view your website!</username><h3 id="Bind-Your-Owned-Domain-to-GitHub-Pages"><a href="#Bind-Your-Owned-Domain-to-GitHub-Pages" class="headerlink" title="Bind Your Owned Domain to GitHub Pages"></a>Bind Your Owned Domain to GitHub Pages</h3><p>What? You have your owned domain and you want to bind it to your new blog? Of course, it can be done easily.</p><p>First, you need to create a new file called <code>CNAME</code> under <code>source/</code> folder, with the content of your desired domain (including subdomains.</p><p>Second, set the DNS record of your domain, CNAME it to <code>USERNAME.github.io</code> .</p><p>Third, run <code>hexo clean</code> then deploy again.</p><p>Finally, test your new custom domain.</p><p>Please be noted that, if you want to use an APEX domain, you need to follow the instruction here: <a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="noopener">https://help.github.com/articles/setting-up-an-apex-domain/</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Hexo itself actually provides some document here: <a href="https://hexo.io/docs/index.html" target="_blank" rel="noopener">https://hexo.io/docs/index.html</a>. Please read it if you want to know more.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Want to have a place to save your ideas? You may need a blog. But the question comes, what kind of blogging software do you need?&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Tutorials" scheme="https://xiaoxing.us/categories/Tutorials/"/>
    
    
      <category term="Installation" scheme="https://xiaoxing.us/tags/Installation/"/>
    
      <category term="Hexo" scheme="https://xiaoxing.us/tags/Hexo/"/>
    
  </entry>
  
</feed>
